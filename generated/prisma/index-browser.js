
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.HospitalScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  photo: 'photo',
  HospitalStatus: 'HospitalStatus',
  phone: 'phone',
  mail: 'mail'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  hospital_Id: 'hospital_Id',
  user_Id: 'user_Id',
  password: 'password',
  role: 'role'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  hospital_Id: 'hospital_Id',
  user_Id: 'user_Id',
  destination: 'destination',
  phone: 'phone',
  email: 'email',
  address: 'address',
  photo: 'photo',
  name: 'name',
  status: 'status',
  gender: 'gender',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminStratorScalarFieldEnum = {
  id: 'id',
  user_Id: 'user_Id',
  name: 'name',
  status: 'status',
  destination: 'destination',
  phone: 'phone',
  email: 'email',
  photo: 'photo',
  address: 'address',
  gender: 'gender'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  hospital_Id: 'hospital_Id',
  user_Id: 'user_Id',
  name: 'name',
  phone: 'phone',
  email: 'email',
  photo: 'photo',
  status: 'status',
  address: 'address',
  dob: 'dob',
  gender: 'gender',
  bldGrp: 'bldGrp',
  currentProblem: 'currentProblem',
  medicalHistory: 'medicalHistory',
  height: 'height',
  weight: 'weight',
  bp: 'bp',
  sugar: 'sugar',
  custom: 'custom',
  tempCreatedAt: 'tempCreatedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConsultationScalarFieldEnum = {
  id: 'id',
  hospital_Id: 'hospital_Id',
  patient_Id: 'patient_Id',
  doctor_Id: 'doctor_Id',
  date: 'date',
  purpose: 'purpose',
  temperature: 'temperature',
  symptoms: 'symptoms',
  notes: 'notes',
  diagnosis: 'diagnosis',
  treatment: 'treatment',
  medicineInjection: 'medicineInjection',
  scanningTesting: 'scanningTesting',
  status: 'status',
  access: 'access',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  paymentStatus: 'paymentStatus'
};

exports.Prisma.TreatmentScalarFieldEnum = {
  id: 'id',
  hospital_Id: 'hospital_Id',
  staff_Id: 'staff_Id',
  patient_Id: 'patient_Id',
  doctor_Id: 'doctor_Id',
  treatmentName: 'treatmentName',
  startDate: 'startDate',
  endDate: 'endDate',
  progress: 'progress',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  paymentStatus: 'paymentStatus'
};

exports.Prisma.MedicianScalarFieldEnum = {
  id: 'id',
  hospital_Id: 'hospital_Id',
  medicianName: 'medicianName',
  stock: 'stock',
  amount: 'amount',
  staffId: 'staffId'
};

exports.Prisma.InjectionScalarFieldEnum = {
  id: 'id',
  hospital_Id: 'hospital_Id',
  injectionName: 'injectionName',
  stock: 'stock',
  amount: 'amount',
  staffId: 'staffId'
};

exports.Prisma.TestingAndScanningHScalarFieldEnum = {
  id: 'id',
  hospital_Id: 'hospital_Id',
  type: 'type',
  status: 'status',
  roomNo: 'roomNo',
  staffId: 'staffId',
  amount: 'amount'
};

exports.Prisma.MedicineAndInjectionScalarFieldEnum = {
  id: 'id',
  hospital_Id: 'hospital_Id',
  patient_Id: 'patient_Id',
  doctor_Id: 'doctor_Id',
  staff_Id: 'staff_Id',
  medicine_Id: 'medicine_Id',
  frequencyMedicine: 'frequencyMedicine',
  injection_Id: 'injection_Id',
  frequencyInjection: 'frequencyInjection',
  status: 'status',
  notes: 'notes',
  paymentStatus: 'paymentStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TestingAndScanningPScalarFieldEnum = {
  id: 'id',
  hospital_Id: 'hospital_Id',
  patient_Id: 'patient_Id',
  doctor_Id: 'doctor_Id',
  staff_Id: 'staff_Id',
  title: 'title',
  scheduleDate: 'scheduleDate',
  type: 'type',
  status: 'status',
  paymentStatus: 'paymentStatus',
  result: 'result'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  hospital_Id: 'hospital_Id',
  patient_Id: 'patient_Id',
  reason: 'reason',
  status: 'status',
  amount: 'amount',
  transactionId: 'transactionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoomsAvailableScalarFieldEnum = {
  id: 'id',
  hospital_Id: 'hospital_Id',
  staffId: 'staffId',
  roomNo: 'roomNo',
  capacity: 'capacity',
  notes: 'notes',
  type: 'type',
  amount: 'amount'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.HospitalOrderByRelevanceFieldEnum = {
  name: 'name',
  address: 'address',
  photo: 'photo',
  phone: 'phone',
  mail: 'mail'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  password: 'password',
  role: 'role'
};

exports.Prisma.AdminOrderByRelevanceFieldEnum = {
  destination: 'destination',
  phone: 'phone',
  email: 'email',
  address: 'address',
  photo: 'photo',
  name: 'name',
  status: 'status',
  gender: 'gender'
};

exports.Prisma.AdminStratorOrderByRelevanceFieldEnum = {
  name: 'name',
  status: 'status',
  destination: 'destination',
  phone: 'phone',
  email: 'email',
  photo: 'photo',
  address: 'address',
  gender: 'gender'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.PatientOrderByRelevanceFieldEnum = {
  name: 'name',
  photo: 'photo',
  status: 'status',
  gender: 'gender',
  bldGrp: 'bldGrp',
  currentProblem: 'currentProblem',
  medicalHistory: 'medicalHistory',
  bp: 'bp',
  sugar: 'sugar'
};

exports.Prisma.ConsultationOrderByRelevanceFieldEnum = {
  purpose: 'purpose',
  symptoms: 'symptoms',
  diagnosis: 'diagnosis',
  status: 'status'
};

exports.Prisma.TreatmentOrderByRelevanceFieldEnum = {
  progress: 'progress',
  status: 'status'
};

exports.Prisma.MedicianOrderByRelevanceFieldEnum = {
  medicianName: 'medicianName'
};

exports.Prisma.InjectionOrderByRelevanceFieldEnum = {
  injectionName: 'injectionName'
};

exports.Prisma.TestingAndScanningHOrderByRelevanceFieldEnum = {
  type: 'type',
  status: 'status',
  roomNo: 'roomNo'
};

exports.Prisma.MedicineAndInjectionOrderByRelevanceFieldEnum = {
  status: 'status'
};

exports.Prisma.TestingAndScanningPOrderByRelevanceFieldEnum = {
  title: 'title',
  type: 'type',
  status: 'status',
  result: 'result'
};

exports.Prisma.PaymentOrderByRelevanceFieldEnum = {
  reason: 'reason'
};

exports.Prisma.RoomsAvailableOrderByRelevanceFieldEnum = {
  roomNo: 'roomNo',
  notes: 'notes',
  type: 'type'
};
exports.HospitalStatus = exports.$Enums.HospitalStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  success: 'success',
  failed: 'failed'
};

exports.Prisma.ModelName = {
  Hospital: 'Hospital',
  User: 'User',
  Admin: 'Admin',
  AdminStrator: 'AdminStrator',
  Patient: 'Patient',
  Consultation: 'Consultation',
  Treatment: 'Treatment',
  Medician: 'Medician',
  Injection: 'Injection',
  TestingAndScanningH: 'TestingAndScanningH',
  MedicineAndInjection: 'MedicineAndInjection',
  TestingAndScanningP: 'TestingAndScanningP',
  Payment: 'Payment',
  RoomsAvailable: 'RoomsAvailable'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
